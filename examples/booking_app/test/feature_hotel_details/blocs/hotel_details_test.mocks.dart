// Mocks generated by Mockito 5.3.0 from annotations
// in booking_app/test/feature_hotel_details/blocs/hotel_details_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:booking_app/base/common_blocs/coordinator_bloc.dart' as _i2;
import 'package:favorites_advanced_base/models.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCoordinatorBlocEvents_0 extends _i1.SmartFake
    implements _i2.CoordinatorBlocEvents {
  _FakeCoordinatorBlocEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinatorBlocStates_1 extends _i1.SmartFake
    implements _i2.CoordinatorBlocStates {
  _FakeCoordinatorBlocStates_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoordinatorBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocType extends _i1.Mock
    implements _i2.CoordinatorBlocType {
  MockCoordinatorBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CoordinatorBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeCoordinatorBlocEvents_0(
          this,
          Invocation.getter(#events),
        ),
      ) as _i2.CoordinatorBlocEvents);
  @override
  _i2.CoordinatorBlocStates get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeCoordinatorBlocStates_1(
          this,
          Invocation.getter(#states),
        ),
      ) as _i2.CoordinatorBlocStates);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoordinatorBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocEvents extends _i1.Mock
    implements _i2.CoordinatorBlocEvents {
  MockCoordinatorBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void hotelUpdated(_i3.Hotel? hotel) => super.noSuchMethod(
        Invocation.method(
          #hotelUpdated,
          [hotel],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void hotelsWithExtraDetailsFetched(List<_i3.Hotel>? hotels) =>
      super.noSuchMethod(
        Invocation.method(
          #hotelsWithExtraDetailsFetched,
          [hotels],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoordinatorBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocStates extends _i1.Mock
    implements _i2.CoordinatorBlocStates {
  MockCoordinatorBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i3.Hotel> get onHotelUpdated => (super.noSuchMethod(
        Invocation.getter(#onHotelUpdated),
        returnValue: _i4.Stream<_i3.Hotel>.empty(),
      ) as _i4.Stream<_i3.Hotel>);
  @override
  _i4.Stream<List<_i3.Hotel>> get onFetchedHotelsWithExtraDetails =>
      (super.noSuchMethod(
        Invocation.getter(#onFetchedHotelsWithExtraDetails),
        returnValue: _i4.Stream<List<_i3.Hotel>>.empty(),
      ) as _i4.Stream<List<_i3.Hotel>>);
  @override
  _i4.Stream<List<_i3.Hotel>> get onHotelsUpdated => (super.noSuchMethod(
        Invocation.getter(#onHotelsUpdated),
        returnValue: _i4.Stream<List<_i3.Hotel>>.empty(),
      ) as _i4.Stream<List<_i3.Hotel>>);
}
