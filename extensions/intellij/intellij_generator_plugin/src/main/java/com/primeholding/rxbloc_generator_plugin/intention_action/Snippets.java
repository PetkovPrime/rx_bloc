package com.primeholding.rxbloc_generator_plugin.intention_action;


public class Snippets {
    public static final String BLOC_SNIPPET_KEY = "BlocType";
    public static final String STATE_TYPE_SNIPPET_KEY = "StateType";
    public static final String STATE_SNIPPET_KEY = "someState";

    static String getSnippet(SnippetType snippetType, String widget) {
        switch (snippetType) {
            case RxBlocBuilder:
                return blocBuilderSnippet(widget);
            case RxPaginatedBuilder:
                return blocPaginatedBuilderSnippet(widget);
            case RxResultBuilder:
                return blocResultBuilderSnippet(widget);
            case RxBlocListener:
                return blocListenerSnippet(widget);
            case RxFormFieldBuilder:
                return formFieldSnippet(widget);
            case RxTextFormFieldBuilder:
                return formTextFieldSnippet(widget);
        }

        return blocBuilderSnippet(widget);
    }

    private static String formTextFieldSnippet(String widget) {
        return String.format("RxTextFormFieldBuilder<%1$s>( \n" +
                        " state: (bloc) => bloc.states.%2$s, // pick a specific state you want to listen for\n" +
                        " showErrorState: (bloc) => bloc.states.showErrors,\n" +
                        " onChanged: (bloc, value) => bloc.events.specificEvent(value), // pick a specific event the field will to send data to\n" +
                        "   ///TODO: Use the controller from the fieldState\n" +
                        "   /// example: `controller: fieldState.controller`\n\n" +
                        "   ///TODO: Copy the decoration generated by the builder widget, which\n" +
                        "   ///contains stuff like when to show errors, with additional\n" +
                        "   ///decoration\n" +
                        "   ///Example `decoration: fieldState.decoration.copyWithDecoration(InputStyles.textFieldDecoration)`\n" +
                        " builder: (fieldState) => %3$s," +
                ")\n", BLOC_SNIPPET_KEY, STATE_SNIPPET_KEY, widget);
    }

    private static String formFieldSnippet(String widget) {
        return String.format("RxFormFieldBuilder<%1$s, %2$s>(\n" +
                "     state: (bloc) => bloc.states.%3$s, // pick a specific state you want to listen for\n" +
                "     showErrorState: (bloc) => bloc.states.showErrors,\n" +
                "     builder: (fieldState) => Column(\n" +
                "       children: [\n" +
                "         %4$s,\n" +
                "         //show errors, say for instance the user tries to save the\n" +
                "         //changes to the form, but they forgot to select a color.\n" +
                "         if (fieldState.showError)\n" +
                "           Row(\n" +
                "             children: [\n" +
                "               Text(\n" +
                "                 fieldState.error,\n" +
                "               ),\n" +
                "             ],\n" +
                "           ),\n" +
                "       ],\n" +
                "      ),\n" +
                "   )\n", BLOC_SNIPPET_KEY, STATE_TYPE_SNIPPET_KEY, STATE_SNIPPET_KEY, widget);
    }

    private static String blocListenerSnippet(String widget) {
        return String.format("RxBlocListener<%1$s, %2$s>(\n" +
                "  state: (bloc) => bloc.states.%3$s, // pick a specific state you want to listen for\n" +
                "  listener: (context, state) {\n" +
                "    // do stuff here based on BlocA's state\n" +
                "  }, \n" +
                "  child: %4$s,\n" +
                ")\n", BLOC_SNIPPET_KEY, STATE_TYPE_SNIPPET_KEY, STATE_SNIPPET_KEY, widget);
    }

    private static String blocBuilderSnippet(String widget) {
        return String.format("RxBlocBuilder<%1$s, %2$s>(\n" +
                "  state: (bloc) => bloc.states.%3$s, // pick a specific state you want to listen for\n"+
                "  builder: (context, snapshot, bloc) =>\n" +
                "    %4$s,\n" +
                ")\n", BLOC_SNIPPET_KEY, STATE_TYPE_SNIPPET_KEY, STATE_SNIPPET_KEY, widget);
    }

    private static String blocPaginatedBuilderSnippet(String widget) {
        return String.format("RxPaginatedBuilder<%1$s, %2$s>.withRefreshIndicator(\n" +
                        "          state: (bloc) => bloc.states.%3$s, // pick a specific state you want to listen for\n" +
                        "          onBottomScrolled: (bloc) => bloc.events.loadPage(),\n" +
                        "          onRefresh: (bloc) async {\n" +
                        "            bloc.events.loadPage(reset: true);\n" +
                        "            return bloc.states.refreshDone;\n" +
                        "          },\n" +
                        "          buildSuccess: (context, list, bloc) => ListView.builder(\n" +
                        "            itemBuilder: (context, index) {\n" +
                        "               final item = list.getItem(index);\n\n" +
                        "               if (item == null) {\n" +
                        "                return const YourProgressIndicator();\n" +
                        "               }\n\n" +
                        "              return YourListTile(item: item);\n" +
                        "            },\n" +
                        "            itemCount: list.itemCount,\n" +
                        "          ),\n" +
                        "          buildLoading: (context, list, bloc) =>\n" +
                        "              const YourProgressIndicator(),\n" +
                        "          buildError: (context, list, bloc) =>\n" +
                        "              YourErrorWidget(error: list.error!),\n" +
                        "        )\n", BLOC_SNIPPET_KEY, STATE_TYPE_SNIPPET_KEY, STATE_SNIPPET_KEY, widget);
    }

    private static String blocResultBuilderSnippet(String widget) {
        return String.format("RxResultBuilder<%1$s, %2$s>(\n" +
                " state: (bloc) => bloc.states.%3$s, // pick a specific state you want to listen for\n" +
                " buildSuccess: (context, data, bloc) => %4$s,\n" +
                " buildLoading: (context, bloc) => \n" +
                "   const CircularProgressIndicator(),\n" +
                " buildError: (context, error, bloc) => \n" +
                "   Text(error),\n" +
                ")\n", BLOC_SNIPPET_KEY, STATE_TYPE_SNIPPET_KEY, STATE_SNIPPET_KEY, widget);
    }
}