// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: RxBlocGeneratorForAnnotation
// **************************************************************************

part of '${bloc_snake_case}_list_bloc.dart';

/// Used as a contractor for the bloc, events and states classes
/// {@nodoc}
abstract class ${bloc_pascal_case}ListBlocType extends RxBlocTypeBase {
  /// Events of the bloc
  ${bloc_pascal_case}ListBlocEvents get events;

  /// States of the bloc
  ${bloc_pascal_case}ListBlocStates get states;
}

/// [${bloc_dollar_pascal_case}List] extended by the [${bloc_pascal_case}List]
/// {@nodoc}
abstract class ${bloc_dollar_pascal_case}ListBloc extends RxBlocBase
    implements ${bloc_pascal_case}ListBlocEvents, ${bloc_pascal_case}ListBlocStates, ${bloc_pascal_case}ListBlocType {
  final _compositeSubscription = CompositeSubscription();

  /// Ð¢he [Subject] where events sink to by calling [loadPage]
  final _$loadPageEvent = PublishSubject<bool>();

  /// The state of [isLoading] implemented in [_mapToIsLoadingState]
  late final Stream<bool> _isLoadingState = _mapToIsLoadingState();

  /// The state of [errors] implemented in [_mapToErrorsState]
  late final Stream<String> _errorsState = _mapToErrorsState();

  /// The state of [paginatedList] implemented in [_mapToPaginatedListState]
  late final Stream<PaginatedList<${bloc_pascal_case}>> _paginatedListState =
      _mapToPaginatedListState();

  @override
  void loadPage({bool reset = false}) => _$loadPageEvent.add(reset);

  @override
  Stream<bool> get isLoading => _isLoadingState;

  @override
  Stream<String> get errors => _errorsState;

  @override
  Stream<PaginatedList<${bloc_pascal_case}>> get paginatedList => _paginatedListState;

  Stream<bool> _mapToIsLoadingState();

  Stream<String> _mapToErrorsState();

  Stream<PaginatedList<${bloc_pascal_case}>> _mapToPaginatedListState();

  @override
  ${bloc_pascal_case}ListBlocEvents get events => this;

  @override
  ${bloc_pascal_case}ListBlocStates get states => this;

  @override
  void dispose() {
    _$loadPageEvent.close();
    _compositeSubscription.dispose();
    super.dispose();
  }
}